#!/usr/bin/env python
import os
import sys
import getopt
import twitter
import ConfigParser


def usage():
    print('Usage: twofo [OPTION]\n\
Provides a variety of twitter functions from the command line. Will \n\
eventually (read potentially) have a GUI sometime in the future.\n\n\
ACTIONS:\n\
    -d, --delete <number>           Delete the number\'th last post\n\
                                      For example, 0 deletes last post. \n\
                                      1 deletes 2nd to last post\n\
    -f, --friend <twitter user>     Get the last 10 tweets tweeted by \n\
                                      <twitter-user>. Does not require\n\
                                      username or password.\n\
    -h, --help                      Prints this help and exits\n\
    -l, --list                      Lists the 10 most recent tweets from \n\
                                      your friends. You must provide a \n\
                                      username and password.\n\
    -o, --own                       Get the last 10 tweets you tweeted.\n\
                                      requires that a username be \n\
                                      provided using "-u <username>"\n\
                                      (equiv to -f <own_username>)\n\
    -t, --tweet "<tweet message>"   Tweets the message enclosed in the \n\
                                      quotes. You must provide a valid\n\
                                      username and password.\n\n\
OPTIONS:\n\
    -p, --password <password>       Sets the password for authentication.\n\
    -u, --username <username>       Sets the username for authentication.\n\n\
Report bugs to info@gangplankhq.com\n')

def tweet(api, message):
    """Set your status to <message>."""
    status = api.PostUpdate(message)

def delete_tweet(api, username, number):
    # Deletes n'th last post. number=2 would delete the 3rd to last post
    statuses = api.GetUserTimeline(username, number)
    status = get_status_from_statuses(statuses, number)
    status_id = status.GetId()
    if confirm_action(status, "delete"):
        api.DestroyStatus(status_id)
    else:
        print("Delete action aborted")
        sys.exit(0)

def confirm_action(status, action):
    # Set bold modifiers
    bold = "\033[1m"
    reset = "\033[0;0m"

    # Get potser
    poster = status.GetUser()
    status_poster = bold + poster.GetName() + reset
    status_text = status.GetText()
    print("\n\
%s\n\
%s" % (status_poster,status_text))

    status_time = status.GetCreatedAt()
    print("\ttweeted on: %s\n" % (status_time))

    inquery_text = "Are you sure you wish to %s this tweet, \n\
    this action cannot be undone (y/n):" % (action)
    inquery_response = raw_input(inquery_text)
    if inquery_response in ("y", "Y", "yes", "Yes", "YES"):
        return True
    else:
        return False


def get_status_from_statuses(statuses, number):
    # Retrieves the number'th index of statuses. This method is necessary
    # because statuses are indexed by their status id, often non sequential and
    # in the millions
    counter = 0
    for status in statuses:
        if counter == number:
            return status

def authenticated_list(api, authenticated_username):
    statuses = api.GetFriendsTimeline(authenticated_username)
    print_statuses(statuses)

def unauthenticated_list(api, username):
    statuses = api.GetUserTimeline(username)
    print_statuses(statuses)

def print_statuses(statuses):
    counter = 0
    for status in statuses:
        if counter < 10:
            user = status.GetUser()
            username = user.GetName()
            message = status.GetText()
            print "%s: %s\n" % (username, message)
            counter = counter + 1
    sys.exit(1)

def ensure_dir(directory):
    dir = os.path.dirname(directory)
    if not os.path.exists(dir):
        os.makedirs(dir)

def load_config():
    # Check the config file to see if we can extract the username and password
    # This method returns a dictionary containing the username and password
    # Instantiate our dictionary object
    user_and_pass = {'username': None, 'password': None}
    # Open the config file
    config = ConfigParser.SafeConfigParser()
    defaultConfigDir = "%s/.config/twofo/default.conf" % os.getenv("HOME")
    # There is currently no way to overide the defaultConfigDir. I might
    # implement this later - Roy
    config.read(defaultConfigDir)
    storeInfo = None
    storeUsername = None
    storePassword = None
    if config.has_option('login', 'username'):
        user_and_pass['username'] = config.get('login', 'username')
    else:
        user_and_pass['username'] = raw_input("Username: ")
        storeInfo = 1
    if config.has_option('login', 'password'):
        user_and_pass['password'] = config.get('login', 'password')

    else:
        user_and_pass['password'] = raw_input("Password: ")
    if config.has_option('login', 'storeInfo'):
        storeInfo = config.get('login', 'storeInfo')
    if storeInfo:
        if storeInfo == 1:
            storeUsername = raw_input("Would you like me to store your username?")
            if storeUsername in ("y", "Y", "yes", "Yes", "YES"):
                storeUsername = True
            else:
                storeUsername = False
            if storeUsername:
                    storePassword = raw_input("Would you like me to store your password as well?, WARNING: I will be storing the password in a plain text file. Use with caution, you will not be asked again: ")
                    if storePassword in ("y", "Y", "yes", "Yes", "YES"):
                        storePassword = True
                    else:
                        storePassword = False
    # At this point, we know what we are allowed to store
    if storeUsername:
        if not config.has_section('login'):
            config.add_section('login')
        config.set('login', 'username', user_and_pass['username'])
        if storePassword:
            config.set('login', 'password', user_and_pass['password'])
        ensure_dir(defaultConfigDir)
        configfile = open(defaultConfigDir, 'wb')
        config.write(configfile)
    return user_and_pass

def read_parameters(argv):
    # Start reading passed parameters
    # Returns a dictionary containing the action and an optional argument
    parameters = {'action': None, 'argument': None}
    try:
        opts, args = getopt.getopt(argv, "df:hlop:t:u:",
        ["delete", "friend", "help", "list",
        "own", "password", "tweet", "username"])
    except getopt.error:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-d", "--delete"):
            # argument is optional for delete tweet. Defaults to 0 if no
            # argument is given
            parameters['action'] = "delete_tweet"
            if arg:
                parameters['argument'] = arg
            else:
                parameters['argument'] = 0
        elif opt in ("-f", "--friend"):
            parameters['action'] = "list_friend"
            parameters['argument'] = arg
        elif opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-l", "--list"):
            parameters['action'] = "list"
        elif opt in ("-o", "--own"):
            parameters['action'] = "list_own"
        elif opt in ("-p", "--password"):
            password = arg
        elif opt in ("-t", "--tweet"):
            parameters['action'] = "tweet"
            parameters['argument'] = arg
        elif opt in ("-u", "--username"):
            username = arg
    return parameters


def main(argv):
    username = None
    password = None

    # attempt to load the config file
    user_and_pass = load_config()
    username = user_and_pass['username']
    password = user_and_pass['password']


    # We are no longer using a global api variable. 
    # The api must be passed as a parameter. This prevents coupling
    api = None

    # Read the passed parameters
    parameters = read_parameters(argv)
    action = parameters['action']
    argument = parameters['argument']

    if action:
        if username and password:
            api = twitter.Api(username=username, password=password)
        else:
            api = twitter.Api()
        if action in ("list", "list_friend", "list_own"):
            if action in ("list_own"):
                if username:
                    argument = username
                else:
                    print "A username must be supplied to get your list"
                    sys.exit(-1)
            if action in ("list_friend", "list_own"):
                unauthenticated_list(api, argument)
            elif action in ("list"):
                if username and password:
                    authenticated_list(api, username)
                else:
                    print "A username and password must be supplied to get that list"
                    sys.exit(-1)
        elif action in ("tweet", "delete_tweet"):
            if username and password:
                if action in ("tweet"):
                    tweet(api, argument)
                elif action in ("delete_tweet"):
                    delete_tweet(api, username, argument)
            else:
                print "Username and password must be supplied to post a tweet"
                sys.exit(-1)
    else:
        print "You gotta tell me to do something"
        sys.exit(-1)

if __name__ == "__main__":
    main(sys.argv[1:])
