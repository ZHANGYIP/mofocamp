#!/usr/bin/env python
import os
import sys
import getopt
import twitter
import ConfigParser

#Declare globals
api = None

def usage():
    print('Usage: twofo [OPTION]\nProvides a variety of twitter functions from the command line. Will eventually (read potentially) have a GUI sometime in the future.\n\nACTIONS:\n\t-f, --friend <twitter user>\tGet the last 10 tweets tweeted by \n\t\t\t\t\t<twitter-user>. Does not require\n\t\t\t\t\tusername or password.\n\t-h, --help\t\t\tPrints this help and exits\n\t-l, --list\t\t\tLists the 10 most recent tweets from \n\t\t\t\t\tyour friends. You must provide a \n\t\t\t\t\tusername and password.\n\t-o, --own\t\t\tGet the last 10 tweets you tweeted.\n\t\t\t\t\trequires that a username be \n\t\t\t\t\tprovided using "-u <username>"\n\t\t\t\t\t(equiv to -f <own_username>)\n\t-t, --tweet "<tweet message>"   Tweets the message enclosed in the \n\t\t\t\t\tquotes. You must provide a valid\n\t\t\t\t\tusername and password.\n\nOPTIONS:\n\t-p, --password <password>\tSets the password for authentication.\n\t-u, --username <username>\tSets the username for authentication.\n\nReport bugs to place@hold.er\n')

def tweet(message):
    """Set your status to <message>."""
    status = api.PostUpdate(message)

def authenticatedList(authenticatedUsername):
    global api
    # Get our username from the global api var
    statuses = api.GetFriendsTimeline(authenticatedUsername)
    printStatuses(statuses)

def unauthenticatedList(username):
    global api
    statuses = api.GetUserTimeline(username)
    printStatuses(statuses)

def printStatuses(statuses):
    counter = 0
    for status in statuses:
        if counter < 10:
            user = status.GetUser()
            username = user.GetName()
            message = status.GetText()
            print "%s: %s\n" % (username, message)
            counter = counter + 1
    sys.exit(1)

def ensure_dir(directory):
    dir = os.path.dirname(directory)
    if not os.path.exists(dir):
        os.makedirs(dir)

def main(argv):
    username = None
    password = None
    storeInfo = None
    storeUsername = None
    storePassword = None
    # Check the config file to see if we can extract the username and password
    config = ConfigParser.SafeConfigParser()
    defaultConfigDir = "%s/.config/twofo/default.conf" % os.getenv("HOME")
    config.read(defaultConfigDir)
    if config.has_option('login', 'username'):
        username = config.get('login', 'username')
    else:
        username = raw_input("Username: ")
        storeInfo = 1
    if config.has_option('login', 'password'):
        password = config.get('login', 'password')
    else:
        password = raw_input("Password: ")
    if config.has_option('login', 'storeInfo'):
        storeInfo = config.get('login', 'storeInfo')
    if storeInfo:
        if storeInfo == 1:
            storeUsername = raw_input("Would you like me to store your username?")
            if storeUsername in ("y", "Y", "yes", "Yes", "YES"):
                storeUsername = True
            else:
                storeUsername = False
            if storeUsername:
                    storePassword = raw_input("Would you like me to store your password as well?, WARNING: I will be storing the password in a plain text file. Use with caution, you will not be asked again: ")
                    if storePassword in ("y", "Y", "yes", "Yes", "YES"):
                        storePassword = True
                    else:
                        storePassword = False
    if storeUsername:
        if not config.has_section('login'):
            config.add_section('login')
        config.set('login', 'username', username)
        if storePassword:
            config.set('login', 'password', password)
        ensure_dir(defaultConfigDir)
        configfile = open(defaultConfigDir, 'wb')
        config.write(configfile)
    action = None
    try:
        opts, args = getopt.getopt(argv, "f:hlop:t:u:", ["friend", "help", "list", "own", "password", "tweet", "username"])
    except getopt.error:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-f", "--friend"):
            action = "listfriend"
            targetUser = arg
        elif opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-l", "--list"):
            action = "list"
        elif opt in ("-o", "--own"):
            action = "listown"
        elif opt in ("-p", "--password"):
            password = arg
        elif opt in ("-t", "--tweet"):
            action = "tweet"
            tweetMessage = arg
        elif opt in ("-u", "--username"):
            username = arg
    global api # Let our function know we mean the global api
    if action:
        if username and password:
            api = twitter.Api(username=username, password=password)
        else:
            api = twitter.Api()
        if action in ("list", "listfriend", "listown"):
            if action in ("listown"):
                if username:
                    targetUser = username
                else:
                    print "A username must be supplied to get your list"
                    sys.exit(-1)
            if action in ("listfriend", "listown"):
                unauthenticatedList(targetUser)
            elif action in ("list"):
                if username and password:
                    authenticatedList(username)
                else:
                    print "A username and password must be supplied to that list"
                    sys.exit(-1)
        elif action in ("tweet"):
            if username and password:
                tweet(tweetMessage)
            else:
                print "Username and password must be supplied to post a tweet"
                sys.exit(-1)
    else:
        print "You gotta tell me to do something"
        sys.exit(-1)

if __name__ == "__main__":
    main(sys.argv[1:])
