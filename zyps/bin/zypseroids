#!/usr/bin/ruby

# Copyright 2007-2008 Zyps Contributors.
# 
# This file is part of Zyps.
# 
# Zyps is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$: << (File.dirname(__FILE__) + '/../lib')

gems_loaded = false
begin
	require 'logger'
	require 'wx'
	require 'yaml'
	require 'zyps'
	require 'zyps/actions'
	require 'zyps/conditions'
	require 'zyps/environmental_factors'
	require 'zyps/remote'
	require 'zyps/serializer'
	require 'zyps/views/trails'
	require 'zyps/views/canvas/wx'
	require 'zomgobjs'
rescue LoadError
	if gems_loaded == false
		require 'rubygems'
		gems_loaded = true
		retry
	else
		raise
	end
end


include Zyps


LOG_HANDLE = STDOUT
LOG_LEVEL = Logger::DEBUG


#The Zyps GUI.
class Application < Wx::App

	#Application configuration.
	attr_accessor :options
	#Config file name.
	attr_accessor :options_file
	#An EnvironmentServer linked to the Environment.
	attr_accessor :server
	#An EnvironmentClient linked to the Environment.
	attr_accessor :client

	#Takes a hash with these keys and defaults:
	#	:width => 800
	#	:height => 600
	#	:max_speed => 200
	#	:max_population => 100
	#	:fps => 60
	#	:enclosure => true
	#	:object_file => nil
	def initialize(options = {})
	
		super()
	
		@log = Logger.new(LOG_HANDLE)
		@log.level = LOG_LEVEL
		@log.progname = self

		@options = {
			:width => 800,
			:height => 600,
			:max_speed => 200,
			:max_population => 50,
			:fps => 30,
			:enclosure => true,
			:object_file => nil,
		}.merge(options)
		@log.debug "options: #{@options.inspect}"
		
		self.options_file = File.join(
			(ENV['HOME'] || ENV['USERPROFILE'] || '.'),
			'.zyps'
		)
		
	end
	

	#Create GUI objects.
	def on_init
		
		@log.debug "Create the main window."
		@frame = Wx::Frame.new(
			nil, #No parent.
			:size => [@options[:width], @options[:height]],
			:title => "Zyps"
		)
		@log.debug "All controls in frame should be resized when frame is."
		@frame.sizer = Wx::BoxSizer.new(Wx::HORIZONTAL)
		@log.debug "Application should exit when frame is closed."
		@frame.evt_close {on_exit}
		
		@log.debug "Create a canvas."
		self.drawing_area = Wx::Window.new(@frame)
		
		@log.debug "Create a View for the Environment to update."
		@view = TrailsView.new(:canvas => WxCanvas.new)
		
		@log.debug "Create an environment, and link it to the view."
		self.environment = Environment.new
				
		@log.debug "Set the Utility module to cache distances and angles."
		Utility.caching_enabled = true
		
		@log.debug "Set up a timer to update the environment."
		milliseconds_per_frame = (1.0 / @options[:fps] * 1000).to_int
		@log.debug "Timer will fire every #{milliseconds_per_frame} milliseconds."
		timer_id = Wx::ID_HIGHEST + 1
		timer = Wx::Timer.new(self, timer_id)
		evt_timer(timer_id) {on_timer}
		timer.start(milliseconds_per_frame)
		

		@log.debug "Display GUI."
		@frame.send_size_event
		@frame.show
	
	end
	
	
	#Update environment and view.
	def on_timer
		#Resize playfield if window has been resized.
		if @view.canvas.height != @drawing_area.size.height || @view.canvas.width != @drawing_area.size.width
			@view.canvas.height = @drawing_area.size.height
			@view.canvas.width = @drawing_area.size.width
			@enclosure.top = @drawing_area.size.height
			@enclosure.right = @drawing_area.size.width
		end
		#Update environment.
		begin
			@environment.interact
		rescue Exception => exception
			@log.warn exception.message
			@log.debug exception.backtrace
			raise
		end
		@log.debug @environment.to_s
		#If there are no Creatures, show instructions on creating them.
		if @environment.object_count == 0
			@view.canvas.buffer.draw do |dc|
				render_text_centered("Click and drag the mouse here to create creatures.", dc)
			end
		end
		#Update viewing area.
		@drawing_area.paint do |dc|
			#Copy from View to drawing area.
			render(dc)
		end
		#Almost all distances and angles will be different next update, so clear the cache.
		Utility.clear_caches
		#Keeps dead objects from accumulating and causing hiccups later.
		GC.start
	end
	
	
	#Shut down.
	def on_exit
		Configuration.save_object(self.options_file, @options) if self.options_file
		exit
	end
	
	
	#When mouse button pressed, record location for use in release event handler.
	def on_key_press(event)
		@log.debug "Key pressed: #{event.get_key_code}."
		case event.get_key_code
		when 315
		  @ship.vector.speed += 10
		when 317
		  @ship.vector.speed -= 10
		when 314
		  @ship.vector.pitch -= 10
		when 316
		  @ship.vector.pitch += 10
		end
	end
	
	
	#Takes a Wx::DC to copy the view to.
	def render(dc)
		#Copy the buffer to the device context.
		dc.draw_bitmap(@view.canvas.buffer, 0, 0, false)
	end
	
	
	private
	
	
		#Set a new environment up.
		def environment=(value)

			@environment = value
			@log.debug "Link #{@environment} to #{@view}."
			@environment.add_observer(@view)
			
  	  #Add asteroids.
  	  6.times do
  	    @environment.add_object(
  	      Asteroid.new(
  	        :location => Location.new(rand(800), rand(600)),
  	        :size => 300,
  	        :vector => Vector.new(rand(20), rand(360))
  	      )
  	    )
  	  end
  	  #Add player.
  	  @ship = 	    Ship.new(
      	      :location => Location.new(400, 300),
    	        :size => 100,
    	        :vector => Vector.new(rand(20), rand(360))
      	    )
  	  @environment.add_object(@ship)
  	  #Have objects wrap.
  	  @enclosure = WrapAround.new(
    	  :left => 0,
  			:bottom => 0,
  			:top => @drawing_area.size.height,
  			:right => @drawing_area.size.width
  	  )
  	  @environment.add_environmental_factor(@enclosure)

			@environment.add_environmental_factor SpeedLimit.new(@options[:max_speed]) if @options[:max_speed]
			@environment.add_environmental_factor PopulationLimit.new(@options[:max_population]) if @options[:max_population]
			
			@log.debug @environment.to_s
			
		end
		
		
		#Set up a new drawing area.
		def drawing_area=(value)
		
			@drawing_area = value
			@drawing_area.min_size = [0, 0]
			@frame.sizer.add(@drawing_area, 1, Wx::GROW)
			
			@log.debug "Set up key press handlers for canvas."
			@drawing_area.evt_key_down {|event| on_key_press(event)}
			
			@log.debug "Whenever the drawing area needs updating, copy the view's buffer over."
			@drawing_area.evt_paint {|event| @drawing_area.paint {|dc| render(dc)}}
			
		end
		
		
end


begin
	#Create application.
	application = Application.new
	application.main_loop
rescue SystemExit
	#No action.
rescue Exception => exception
	#Print error to STDERR and exit with an abnormal status.
	abort "Error: " + exception.message + exception.backtrace.join("\n")
end


